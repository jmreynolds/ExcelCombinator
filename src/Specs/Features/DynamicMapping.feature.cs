// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DynamicMapping")]
    [NUnit.Framework.CategoryAttribute("Unit")]
    [NUnit.Framework.CategoryAttribute("Mapping")]
    public partial class DynamicMappingFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DynamicMapping.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DynamicMapping", "\tIn order to send postcards\r\n\tAs a data processor\r\n\tI want to import any columns " +
                    "from excel", ProgrammingLanguage.CSharp, new string[] {
                        "Unit",
                        "Mapping"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Map data from excel to POCO list")]
        public virtual void MapDataFromExcelToPOCOList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Map data from excel to POCO list", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("A sample generic input worksheet with 3 rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("I map them to a POCO list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("the input result should have 3 rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Map municipal data from excel")]
        public virtual void MapMunicipalDataFromExcel()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Map municipal data from excel", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.Given("a sample input worksheet with the municipal format with 3 rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
 testRunner.When("I map them to a POCO list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
 testRunner.Then("the input result should have 3 rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should Map From Input Class List Into Output Class List")]
        public virtual void ShouldMapFromInputClassListIntoOutputClassList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should Map From Input Class List Into Output Class List", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("a sample list mapped from the municipal format", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column"});
            table1.AddRow(new string[] {
                        "OffenseDate"});
            table1.AddRow(new string[] {
                        "CitationNumber"});
            table1.AddRow(new string[] {
                        "Name"});
            table1.AddRow(new string[] {
                        "Address"});
            table1.AddRow(new string[] {
                        "Address2"});
            table1.AddRow(new string[] {
                        "Offense"});
            table1.AddRow(new string[] {
                        "Juvenile"});
            table1.AddRow(new string[] {
                        "DispOper"});
            table1.AddRow(new string[] {
                        "DispositionDate"});
            table1.AddRow(new string[] {
                        "LastHearingDate"});
            table1.AddRow(new string[] {
                        "Court"});
            table1.AddRow(new string[] {
                        "LastHearingCode"});
            table1.AddRow(new string[] {
                        "DateOfBirth"});
            table1.AddRow(new string[] {
                        "Final"});
#line 19
   testRunner.And("the input columns are:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column"});
            table2.AddRow(new string[] {
                        "Name"});
            table2.AddRow(new string[] {
                        "Address"});
            table2.AddRow(new string[] {
                        "Address2"});
            table2.AddRow(new string[] {
                        "DispositionDate"});
#line 35
  testRunner.And("the following fields are marked for inclusion:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column"});
            table3.AddRow(new string[] {
                        "Name"});
            table3.AddRow(new string[] {
                        "Address"});
            table3.AddRow(new string[] {
                        "Address2"});
            table3.AddRow(new string[] {
                        "DateOfBirth"});
#line 41
  testRunner.And("the following fields are marked as de-dupe fields:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column"});
            table4.AddRow(new string[] {
                        "CitationNumber"});
            table4.AddRow(new string[] {
                        "Offense"});
#line 47
  testRunner.And("the following fields are marked as aggregate fields:", ((string)(null)), table4, "And ");
#line 51
  testRunner.And("the list has 5 rows with 0 duplicate records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
 testRunner.When("I process the list for output", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.Then("the result should be an output in the municipal format", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 54
  testRunner.And("the output result should have 5 rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column"});
            table5.AddRow(new string[] {
                        "Name"});
            table5.AddRow(new string[] {
                        "Address"});
            table5.AddRow(new string[] {
                        "Address2"});
            table5.AddRow(new string[] {
                        "DispositionDate"});
            table5.AddRow(new string[] {
                        "Citations"});
#line 55
  testRunner.And("the column names should be:", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Correctly De-Duplicate the Input Data")]
        public virtual void CorrectlyDe_DuplicateTheInputData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Correctly De-Duplicate the Input Data", ((string[])(null)));
#line 63
this.ScenarioSetup(scenarioInfo);
#line 64
 testRunner.Given("a sample list mapped from the municipal format", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column"});
            table6.AddRow(new string[] {
                        "OffenseDate"});
            table6.AddRow(new string[] {
                        "CitationNumber"});
            table6.AddRow(new string[] {
                        "Name"});
            table6.AddRow(new string[] {
                        "Address"});
            table6.AddRow(new string[] {
                        "Address2"});
            table6.AddRow(new string[] {
                        "Offense"});
            table6.AddRow(new string[] {
                        "Juvenile"});
            table6.AddRow(new string[] {
                        "DispOper"});
            table6.AddRow(new string[] {
                        "DispositionDate"});
            table6.AddRow(new string[] {
                        "LastHearingDate"});
            table6.AddRow(new string[] {
                        "Court"});
            table6.AddRow(new string[] {
                        "LastHearingCode"});
            table6.AddRow(new string[] {
                        "DateOfBirth"});
            table6.AddRow(new string[] {
                        "Final"});
#line 65
  testRunner.And("the input columns are:", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column"});
            table7.AddRow(new string[] {
                        "Name"});
            table7.AddRow(new string[] {
                        "Address"});
            table7.AddRow(new string[] {
                        "Address2"});
            table7.AddRow(new string[] {
                        "DispositionDate"});
#line 81
  testRunner.And("the following fields are marked for inclusion:", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column"});
            table8.AddRow(new string[] {
                        "Name"});
            table8.AddRow(new string[] {
                        "Address"});
            table8.AddRow(new string[] {
                        "Address2"});
            table8.AddRow(new string[] {
                        "DateOfBirth"});
#line 87
  testRunner.And("the following fields are marked as de-dupe fields:", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column"});
            table9.AddRow(new string[] {
                        "CitationNumber"});
            table9.AddRow(new string[] {
                        "Offense"});
#line 93
  testRunner.And("the following fields are marked as aggregate fields:", ((string)(null)), table9, "And ");
#line 97
  testRunner.And("the list has 5 rows with 1 duplicate records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.When("I process the list for output", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
 testRunner.Then("the result should be an output in the municipal format", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 100
  testRunner.And("the output result should have 4 rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column"});
            table10.AddRow(new string[] {
                        "Name"});
            table10.AddRow(new string[] {
                        "Address"});
            table10.AddRow(new string[] {
                        "Address2"});
            table10.AddRow(new string[] {
                        "DispositionDate"});
            table10.AddRow(new string[] {
                        "Citations"});
#line 101
  testRunner.And("the column names should be:", ((string)(null)), table10, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Correctly Evaluate De-Dupe Fields")]
        public virtual void CorrectlyEvaluateDe_DupeFields()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Correctly Evaluate De-Dupe Fields", ((string[])(null)));
#line 109
this.ScenarioSetup(scenarioInfo);
#line 110
 testRunner.Given("a sample list mapped from the municipal format", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column"});
            table11.AddRow(new string[] {
                        "OffenseDate"});
            table11.AddRow(new string[] {
                        "CitationNumber"});
            table11.AddRow(new string[] {
                        "Name"});
            table11.AddRow(new string[] {
                        "Address"});
            table11.AddRow(new string[] {
                        "Address2"});
            table11.AddRow(new string[] {
                        "Offense"});
            table11.AddRow(new string[] {
                        "Juvenile"});
            table11.AddRow(new string[] {
                        "DispOper"});
            table11.AddRow(new string[] {
                        "DispositionDate"});
            table11.AddRow(new string[] {
                        "LastHearingDate"});
            table11.AddRow(new string[] {
                        "Court"});
            table11.AddRow(new string[] {
                        "LastHearingCode"});
            table11.AddRow(new string[] {
                        "DateOfBirth"});
            table11.AddRow(new string[] {
                        "Final"});
#line 111
  testRunner.And("the input columns are:", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column"});
            table12.AddRow(new string[] {
                        "Name"});
            table12.AddRow(new string[] {
                        "Address"});
            table12.AddRow(new string[] {
                        "Address2"});
            table12.AddRow(new string[] {
                        "DispositionDate"});
#line 127
  testRunner.And("the following fields are marked for inclusion:", ((string)(null)), table12, "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column"});
            table13.AddRow(new string[] {
                        "Name"});
            table13.AddRow(new string[] {
                        "Address"});
            table13.AddRow(new string[] {
                        "Address2"});
#line 133
  testRunner.And("the following fields are marked as de-dupe fields:", ((string)(null)), table13, "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column"});
            table14.AddRow(new string[] {
                        "CitationNumber"});
            table14.AddRow(new string[] {
                        "Offense"});
#line 138
  testRunner.And("the following fields are marked as aggregate fields:", ((string)(null)), table14, "And ");
#line 142
  testRunner.And("the list has 5 rows with 1 duplicate records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 143
 testRunner.When("I process the list for output", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 144
 testRunner.Then("the result should be an output in the municipal format", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 145
  testRunner.And("the output result should have 4 rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column"});
            table15.AddRow(new string[] {
                        "Name"});
            table15.AddRow(new string[] {
                        "Address"});
            table15.AddRow(new string[] {
                        "Address2"});
            table15.AddRow(new string[] {
                        "DispositionDate"});
            table15.AddRow(new string[] {
                        "Citations"});
#line 146
  testRunner.And("the column names should be:", ((string)(null)), table15, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Correctly Evaluate Inclusion Fields")]
        public virtual void CorrectlyEvaluateInclusionFields()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Correctly Evaluate Inclusion Fields", ((string[])(null)));
#line 154
   this.ScenarioSetup(scenarioInfo);
#line 155
    testRunner.Given("a sample list mapped from the municipal format", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column"});
            table16.AddRow(new string[] {
                        "OffenseDate"});
            table16.AddRow(new string[] {
                        "CitationNumber"});
            table16.AddRow(new string[] {
                        "Name"});
            table16.AddRow(new string[] {
                        "Address"});
            table16.AddRow(new string[] {
                        "Address2"});
            table16.AddRow(new string[] {
                        "Offense"});
            table16.AddRow(new string[] {
                        "Juvenile"});
            table16.AddRow(new string[] {
                        "DispOper"});
            table16.AddRow(new string[] {
                        "DispositionDate"});
            table16.AddRow(new string[] {
                        "LastHearingDate"});
            table16.AddRow(new string[] {
                        "Court"});
            table16.AddRow(new string[] {
                        "LastHearingCode"});
            table16.AddRow(new string[] {
                        "DateOfBirth"});
            table16.AddRow(new string[] {
                        "Final"});
#line 156
  testRunner.And("the input columns are:", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column"});
            table17.AddRow(new string[] {
                        "Name"});
            table17.AddRow(new string[] {
                        "Address"});
            table17.AddRow(new string[] {
                        "Address2"});
#line 172
  testRunner.And("the following fields are marked for inclusion:", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column"});
            table18.AddRow(new string[] {
                        "Name"});
            table18.AddRow(new string[] {
                        "Address"});
            table18.AddRow(new string[] {
                        "Address2"});
            table18.AddRow(new string[] {
                        "DateOfBirth"});
#line 177
  testRunner.And("the following fields are marked as de-dupe fields:", ((string)(null)), table18, "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column"});
            table19.AddRow(new string[] {
                        "CitationNumber"});
            table19.AddRow(new string[] {
                        "Offense"});
#line 183
  testRunner.And("the following fields are marked as aggregate fields:", ((string)(null)), table19, "And ");
#line 187
  testRunner.And("the list has 5 rows with 1 duplicate records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 188
 testRunner.When("I process the list for output", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 189
 testRunner.Then("the result should be an output in the municipal format", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 190
  testRunner.And("the output result should have 4 rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column"});
            table20.AddRow(new string[] {
                        "Name"});
            table20.AddRow(new string[] {
                        "Address"});
            table20.AddRow(new string[] {
                        "Address2"});
            table20.AddRow(new string[] {
                        "Citations"});
#line 191
  testRunner.And("the column names should be:", ((string)(null)), table20, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
