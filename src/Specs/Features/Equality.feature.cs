// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Equality")]
    [NUnit.Framework.CategoryAttribute("Unit")]
    [NUnit.Framework.CategoryAttribute("Equality")]
    public partial class EqualityFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Equality.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Equality", "\tIn order to remove duplicate items\r\n\tI need to compare items\r\n\tAnd have their eq" +
                    "uality evaluated correctly", ProgrammingLanguage.CSharp, new string[] {
                        "Unit",
                        "Equality"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Compare two equal items")]
        public virtual void CompareTwoEqualItems()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compare two equal items", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have 2 Dynamic Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column",
                        "Value",
                        "ShouldRemoveDupes",
                        "ShouldAggregate",
                        "ShouldIncludeInOutput"});
            table1.AddRow(new string[] {
                        "Name",
                        "Name",
                        "true",
                        "false",
                        "true"});
            table1.AddRow(new string[] {
                        "Address",
                        "Address",
                        "true",
                        "false",
                        "true"});
            table1.AddRow(new string[] {
                        "Address2",
                        "Address2",
                        "true",
                        "false",
                        "true"});
            table1.AddRow(new string[] {
                        "DateOfBirth",
                        "1/1/1981",
                        "true",
                        "false",
                        "true"});
            table1.AddRow(new string[] {
                        "ExtraColumn",
                        "ExtraText",
                        "false",
                        "false",
                        "true"});
#line 9
  testRunner.And("the first has the following columns and values:", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column",
                        "Value",
                        "ShouldRemoveDupes",
                        "ShouldAggregate",
                        "ShouldIncludeInOutput"});
            table2.AddRow(new string[] {
                        "Name",
                        "Name",
                        "true",
                        "false",
                        "true"});
            table2.AddRow(new string[] {
                        "Address",
                        "Address",
                        "true",
                        "false",
                        "true"});
            table2.AddRow(new string[] {
                        "Address2",
                        "Address2",
                        "true",
                        "false",
                        "true"});
            table2.AddRow(new string[] {
                        "DateOfBirth",
                        "1/1/1981",
                        "true",
                        "false",
                        "true"});
            table2.AddRow(new string[] {
                        "ExtraColumn",
                        "ExtraText",
                        "false",
                        "false",
                        "true"});
#line 16
  testRunner.And("the second has the following columns and values:", ((string)(null)), table2, "And ");
#line 23
 testRunner.When("I compare the two items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.Then("result of equality should be true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Compare two inequal items")]
        public virtual void CompareTwoInequalItems()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compare two inequal items", ((string[])(null)));
#line 26
 this.ScenarioSetup(scenarioInfo);
#line 27
  testRunner.Given("I have 2 Dynamic Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column",
                        "Value",
                        "ShouldRemoveDupes",
                        "ShouldAggregate",
                        "ShouldIncludeInOutput"});
            table3.AddRow(new string[] {
                        "Name",
                        "Name",
                        "true",
                        "false",
                        "true"});
            table3.AddRow(new string[] {
                        "Address",
                        "Address",
                        "true",
                        "false",
                        "true"});
            table3.AddRow(new string[] {
                        "Address2",
                        "Address2",
                        "true",
                        "false",
                        "true"});
            table3.AddRow(new string[] {
                        "DateOfBirth",
                        "1/1/1981",
                        "true",
                        "false",
                        "true"});
            table3.AddRow(new string[] {
                        "ExtraColumn",
                        "ExtraText",
                        "false",
                        "false",
                        "true"});
#line 28
  testRunner.And("the first has the following columns and values:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column",
                        "Value",
                        "ShouldRemoveDupes",
                        "ShouldAggregate",
                        "ShouldIncludeInOutput"});
            table4.AddRow(new string[] {
                        "Name",
                        "NameDifferent",
                        "true",
                        "false",
                        "true"});
            table4.AddRow(new string[] {
                        "Address",
                        "Address",
                        "true",
                        "false",
                        "true"});
            table4.AddRow(new string[] {
                        "Address2",
                        "Address2",
                        "true",
                        "false",
                        "true"});
            table4.AddRow(new string[] {
                        "DateOfBirth",
                        "1/1/1981",
                        "true",
                        "false",
                        "true"});
            table4.AddRow(new string[] {
                        "ExtraColumn",
                        "ExtraText",
                        "false",
                        "false",
                        "true"});
#line 35
  testRunner.And("the second has the following columns and values:", ((string)(null)), table4, "And ");
#line 42
 testRunner.When("I compare the two items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
 testRunner.Then("result of equality should be false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Compare two equal items with spaces in their names")]
        public virtual void CompareTwoEqualItemsWithSpacesInTheirNames()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compare two equal items with spaces in their names", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line 46
 testRunner.Given("I have 2 Dynamic Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column",
                        "Value",
                        "ShouldRemoveDupes",
                        "ShouldAggregate",
                        "ShouldIncludeInOutput"});
            table5.AddRow(new string[] {
                        "Name",
                        "First Last",
                        "true",
                        "false",
                        "true"});
            table5.AddRow(new string[] {
                        "Address",
                        "Address",
                        "true",
                        "false",
                        "true"});
            table5.AddRow(new string[] {
                        "Address2",
                        "Address2",
                        "true",
                        "false",
                        "true"});
            table5.AddRow(new string[] {
                        "DateOfBirth",
                        "1/1/1981",
                        "true",
                        "false",
                        "true"});
            table5.AddRow(new string[] {
                        "ExtraColumn",
                        "ExtraText",
                        "false",
                        "false",
                        "true"});
#line 47
  testRunner.And("the first has the following columns and values:", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column",
                        "Value",
                        "ShouldRemoveDupes",
                        "ShouldAggregate",
                        "ShouldIncludeInOutput"});
            table6.AddRow(new string[] {
                        "Name",
                        "First   Last",
                        "true",
                        "false",
                        "true"});
            table6.AddRow(new string[] {
                        "Address",
                        "Address",
                        "true",
                        "false",
                        "true"});
            table6.AddRow(new string[] {
                        "Address2",
                        "Address2",
                        "true",
                        "false",
                        "true"});
            table6.AddRow(new string[] {
                        "DateOfBirth",
                        "1/1/1981",
                        "true",
                        "false",
                        "true"});
            table6.AddRow(new string[] {
                        "ExtraColumn",
                        "ExtraText",
                        "false",
                        "false",
                        "true"});
#line 54
  testRunner.And("the second has the following columns and values:", ((string)(null)), table6, "And ");
#line 61
 testRunner.When("I compare the two items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
 testRunner.Then("result of equality should be true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Compare two inequal items where one item has a null")]
        public virtual void CompareTwoInequalItemsWhereOneItemHasANull()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compare two inequal items where one item has a null", ((string[])(null)));
#line 64
this.ScenarioSetup(scenarioInfo);
#line 65
testRunner.Given("I have 2 Dynamic Outputs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column",
                        "Value",
                        "ShouldRemoveDupes",
                        "ShouldAggregate",
                        "ShouldIncludeInOutput"});
            table7.AddRow(new string[] {
                        "Name",
                        "Name",
                        "true",
                        "false",
                        "true"});
            table7.AddRow(new string[] {
                        "Address",
                        "Address",
                        "true",
                        "false",
                        "true"});
            table7.AddRow(new string[] {
                        "Address2",
                        "Address2",
                        "true",
                        "false",
                        "true"});
            table7.AddRow(new string[] {
                        "DateOfBirth",
                        "1/1/1981",
                        "true",
                        "false",
                        "true"});
            table7.AddRow(new string[] {
                        "ExtraColumn",
                        "ExtraText",
                        "false",
                        "false",
                        "true"});
#line 66
 testRunner.And("the first has the following columns and values:", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column",
                        "Value",
                        "ShouldRemoveDupes",
                        "ShouldAggregate",
                        "ShouldIncludeInOutput"});
            table8.AddRow(new string[] {
                        "Name",
                        "null",
                        "true",
                        "false",
                        "true"});
            table8.AddRow(new string[] {
                        "Address",
                        "Address",
                        "true",
                        "false",
                        "true"});
            table8.AddRow(new string[] {
                        "Address2",
                        "Address2",
                        "true",
                        "false",
                        "true"});
            table8.AddRow(new string[] {
                        "DateOfBirth",
                        "1/1/1981",
                        "true",
                        "false",
                        "true"});
            table8.AddRow(new string[] {
                        "ExtraColumn",
                        "ExtraText",
                        "false",
                        "false",
                        "true"});
#line 73
 testRunner.And("the second has the following columns and values:", ((string)(null)), table8, "And ");
#line 80
testRunner.When("I compare the two items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 81
testRunner.Then("result of equality should be false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
